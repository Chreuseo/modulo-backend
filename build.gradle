plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'de.modulo'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.commons:commons-text:1.9'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.itextpdf:itext7-core:8.0.5'
	implementation 'com.itextpdf:html2pdf:5.0.5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core:5.14.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Configure the bootJar task
bootJar {
	archiveFileName = 'modulo-master.jar'  // Specify the name of the output JAR file
	mainClass = 'de.modulo.backend.BackendApplication'  // Replace with your actual main class
	sourceSets {
		main {
			resources {
				srcDirs 'src/main/resources'
			}
		}
	}

	tasks.named('processResources') {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
}

jacoco {
	toolVersion = "0.8.8" // Specify the JaCoCo version you want to use
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport' // Generate report after tests
}


// Configure JaCoCo test report task
jacocoTestReport {
	dependsOn test // Ensure the test task runs before the report is generated

	reports {
		xml.required.set(true)     // Set the XML report to true
		html.required.set(true)    // Set the HTML report to true
	}

	executionData fileTree(dir: project.buildDir, includes: [
			'jacoco/test.exec',
			'jacoco/testCoverage.exec'

	]) // Include the JaCoCo execution data

	sourceSets sourceSets.main // Include the main source set

	afterEvaluate {
		classDirectories.setFrom(files(sourceSets.main.output.asFileTree.map {
			fileTree(dir: it,
					include: '**/*.class',
					exclude: ['**/generated/**/*', '**/SomeExcludedClass.class'] // Exclude any generated or unnecessary classes
			)
		}))
	}
}