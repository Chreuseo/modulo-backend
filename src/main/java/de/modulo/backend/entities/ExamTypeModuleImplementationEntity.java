package de.modulo.backend.entities;

import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.io.Serializable;

@Entity
@Table(name = "exam_type_module_implementation")
@Getter
@Setter
@NoArgsConstructor
public class ExamTypeModuleImplementationEntity {

    @EmbeddedId
    private ExamTypeModuleImplementationId id; // Use the embedded ID

    @ManyToOne
    @JoinColumn(name = "exam_type_id", nullable = false)
    private ExamTypeEntity examType; // Assuming ExamTypeEntity is defined elsewhere

    @ManyToOne
    @JoinColumn(name = "module_implementation_id", nullable = false)
    private ModuleImplementationEntity moduleImplementation;

    private String length;
    private String description;

    @Embeddable
    @Data // Lombok generates getters, setters, equals, hashCode, and toString
    public static class ExamTypeModuleImplementationId implements Serializable {
        private Long examType;   // This should correspond to `CourseTypeEntity` ID
        private Long moduleImplementation;  // This should correspond to `ModuleFrameEntity` ID

        // Default constructor
        public ExamTypeModuleImplementationId() {}

        // Constructor for creating instances of the composite key
        public ExamTypeModuleImplementationId(Long courseType, Long moduleFrame) {
            this.examType = courseType;
            this.moduleImplementation = moduleFrame;
        }

        // equals() and hashCode() are generated by Lombok's @Data
    }

    // Constructors, getters, and setters can be generated using Lombok annotations
}
